import pygame
import sys
import math

# Dimensiones de la pantalla
WIDTH, HEIGHT = 800, 600
# Colores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

class Cannon:
    def __init__(self):
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.bottomleft = (0, HEIGHT)
        self.angle = 45
        self.power = 0

    def update(self):
        mouse_pos = pygame.mouse.get_pos()
        angle = math.atan2(HEIGHT - mouse_pos[1], mouse_pos[0])
        self.angle = math.degrees(angle)
        distance = math.hypot(WIDTH - mouse_pos[0], HEIGHT - mouse_pos[1])
        self.power = min(distance, 100)

    def draw(self, screen):
        pygame.draw.rect(screen, BLACK, self.rect)
        pygame.draw.line(screen, BLACK, self.rect.bottomleft, (self.rect.left, self.rect.bottom - self.power), 5)

class Ragdoll(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((20, 40))
        self.image.fill(WHITE)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.velocity = pygame.math.Vector2(0, 0)

    def update(self):
        self.rect.move_ip(self.velocity)

class Obstacle(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height, static=True):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)
        self.static = static

    def draw(self, screen):
        screen.blit(self.image, self.rect)

def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    clock = pygame.time.Clock()

    cannon = Cannon()
    all_sprites = pygame.sprite.Group()
    obstacles = pygame.sprite.Group()

    # Crear obstáculos estáticos
    obstacles.add(Obstacle(200, 400, 100, 20))
    obstacles.add(Obstacle(500, 300, 100, 20))

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                # Disparar ragdoll
                ragdoll = Ragdoll(cannon.rect.left, cannon.rect.top)
                angle_rad = math.radians(cannon.angle)
                ragdoll.velocity.x = cannon.power * math.cos(angle_rad) * 0.1
                ragdoll.velocity.y = -cannon.power * math.sin(angle_rad) * 0.1
                all_sprites.add(ragdoll)

        all_sprites.update()
        cannon.update()

        screen.fill(WHITE)
        cannon.draw(screen)
        obstacles.draw(screen)
        all_sprites.draw(screen)
        pygame.display.flip()
        clock.tick(60)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
